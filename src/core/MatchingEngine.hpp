#pragma once

#include "Order.hpp"
#include "OrderBook.hpp"
#include "../concurrency/OrderBuffer.hpp"
#include "../concurrency/LockFreeOrderBuffer.hpp"
#include "../listeners/TradeListener.hpp"
#include "Trade.hpp"
#include <vector>

class MatchingEngine {
public:
    void run(LockFreeOrderBuffer& buffer);
    void stop();
    void addTradeListener(TradeListener* listener);
private:
    OrderBook orderBook_;

    // Processes an incoming order.
    // Returns a vector of trades generated by the matching.
    std::vector<Trade> processOrder(Order& order);

    // Flag for the running state of the engine
    std::atomic<bool> running_ = true;

    // Vector of all listeners
    std::vector<TradeListener*> listeners_;

    // Method for broadcasting trades
    void notifyListeners(const Trade& trade);

    void cancelOrder(uint64_t id);
};
